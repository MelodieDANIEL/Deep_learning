
.. slide::

Chapitre 1 - Introduction √† PyTorch et Optimisation de Mod√®les
================

üéØ Objectifs du Chapitre
----------------------


.. important::

   √Ä la fin de ce chapitre, vous saurez : 

   - Cr√©er et manipuler des tenseurs PyTorch sur CPU et GPU.
   - Calculer automatiquement les gradients √† l‚Äôaide de ``autograd``.
   - D√©finir une fonction de co√ªt.
   - Utiliser un optimiseur pour ajuster les param√®tres d‚Äôun mod√®le.
   - Impl√©menter une boucle d'entra√Ænement simple.

.. slide::

üìñ 1. Qu'est-ce que PyTorch ? 
----------------------
PyTorch est une biblioth√®que Python de machine learning open-source d√©velopp√©e par Facebook (FAIR). Elle est con√ßue pour faciliter la cr√©ation et l'entra√Ænement de mod√®les, en particulier dans le domaine du deep learning. 

Elle repose principalement sur deux √©l√©ments :

A) Les *tenseurs*, des structures de donn√©es similaires aux tableaux NumPy (`ndarray`), mais avec des fonctionnalit√©s suppl√©mentaires pour :
    
    - le calcul diff√©rentiel automatique,
    - l'acc√©l√©ration GPU,
    - l‚Äôentra√Ænement de r√©seaux de neurones.

B) Le module ``autograd``, qui permet de calculer automatiquement les gradients n√©cessaires √† l'entra√Ænement des mod√®les, en suivant toutes les op√©rations effectu√©es sur les tenseurs.

.. slide::

D'autres biblioth√®ques Python similaires existent, comme :

- TensorFlow : d√©velopp√© par Google, tr√®s utilis√© pour des d√©ploiements √† grande √©chelle.
- Keras : interface haut niveau de TensorFlow, plus simple mais moins flexible.
- JAX : plus r√©cent, optimis√© pour la recherche et les calculs scientifiques √† haute performance.

.. slide::

Dans le cadre de ce cours, nous utiliserons PyTorch car :

- il est largement adopt√© par la communaut√© de la recherche en deep learning,
- il est plus lisible et plus facile √† d√©boguer que TensorFlow et JAX,
- il offre plus de possibilit√©s que Keras,
- il est bien document√© et est l'une des biblioth√®ques les plus utilis√©es en science des donn√©es (Data Science en anglais) et en apprentissage machine (Machine Learning en anglais).

.. slide::

üìñ 2. Cr√©er un environnement virtuel
----------------------
Pour installer proprement PyTorch et les biblioth√®ques n√©cessaires, nous allons d‚Äôabord cr√©er un environnement virtuel. 

.. slide::

2.1 Qu'est-ce qu'un environnement virtuel ?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Un environnement virtuel (ou Virtual Environment en anglais) est un dossier isol√© dans lequel on peut installer des biblioth√®ques Python sans interf√©rer avec le reste du syst√®me.

En pratique, cela permet :

- d‚Äôavoir une version pr√©cise des biblioth√®ques pour un projet donn√©,
- d‚Äô√©viter les conflits entre diff√©rentes versions de packages,
- de tester des versions sp√©cifiques de biblioth√®ques sans risque,
- de partager facilement le projet avec d'autres personnes,
- de garantir que le code fonctionne de la m√™me mani√®re sur diff√©rentes machines,
- de ne pas polluer l‚Äôinstallation Python globale de votre ordinateur.

C‚Äôest une pratique essentielle pour tous les projets en Machine Learning.

.. slide::

2.2 Tester si ``venv`` est disponible
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Le module ``venv``, inclus normalement avec Python 3, permet de cr√©er un environnement virtuel. Avant de l‚Äôutiliser, vous pouvez v√©rifier s‚Äôil est install√© en tapant la commande suivante dans votre terminal : 

.. code-block:: bash

   python3 -m venv --help

- Si l‚Äôaide s‚Äôaffiche, le module est disponible.
- Sinon, vous verrez une erreur indiquant que ``venv`` est introuvable. Dans ce cas, installez-le avec :

.. code-block:: bash

   sudo apt install python3-venv

.. slide::

2.3 Cr√©er l‚Äôenvironnement
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Pour cr√©er un environnement virtuel, vous pouvez utiliser la commande suivante dans votre terminal :

.. code-block:: bash

   python -m venv nom_de_l_environnement
o√π ``nom_de_l_environnement`` est le nom que vous souhaitez donner √† votre environnement virtuel.

Placez-vous dans le dossier de travail de votre projet (par exemple ``cours_dl/``), puis cr√©ez un environnement virtuel avec :

.. code-block:: bash

   python3 -m venv nom_de_l_environnement

Cela cr√©e un sous-dossier nomm√© ``nom_de_l_environnement`` contenant une version isol√©e de Python. Par exemple, si vous nommez votre environnement ``env_dl``, vous aurez un dossier ``env_dl`` dans votre r√©pertoire de travail.

.. slide::

2.4 Activer l‚Äôenvironnement virtuel
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Vous devez ensuite activer l‚Äôenvironnement pour l‚Äôutiliser en tapant dand votre terminal :

.. code-block:: bash
    
    source nom_de_l_environnement/bin/activate 

Vous saurez que l'environnement est activ√© lorsque le nom de l'environnement appara√Ætra entre parenth√®ses au d√©but de votre invite de commande dans le terminal.

.. slide::

2.5 D√©sactiver l‚Äôenvironnement virtuel
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Pour d√©sactiver l'environnement virtuel, vous pouvez utiliser la commande :

.. code-block:: bash

   deactivate


.. slide::

üìñ 3. Installation de PyTorch
----------------------

Une fois l‚Äôenvironnement virtuel activ√©, vous pouvez installer PyTorch et les biblioth√®ques associ√©es. 


3.1 Choisir la version de PyTorch
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

PyTorch propose diff√©rentes versions adapt√©es √† divers syst√®mes d'exploitation et configurations mat√©rielles (CPU, GPU). Dans ce cours, nous utiliserons la version de PyTorch qui est compatible par d√©faut avec GPU. Cependant, cette version fonctionnera sur toutes les machines (avec ou sans GPU).

Dans le terminal (dans lequel l'environnement virtuel est activ√©), entrez :

.. code-block:: bash

   pip install torch torchvision torchaudio

Cela installera :

- **torch** : la biblioth√®que principale de PyTorch,
- **torchvision** : des outils pour manipuler des images, mod√®les pr√©-entra√Æn√©s, etc.,
- **torchaudio** : pour les donn√©es audio (utile pour d'autres projets).

3.2. Lister les paquets install√©s
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Vous pouvez afficher la liste des biblioth√®ques install√©es dans l‚Äôenvironnement virtuel avec :

.. code-block:: bash

   pip freeze

Cela vous permettra de voir les versions exactes de `torch`, `torchvision`, etc.

3.3 V√©rifier l‚Äôinstallation de PyTorch
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Vous pouvez maintenant tester l‚Äôinstallation de PyTorch avec ce petit script Python :

.. code-block:: python

   import torch

   print("Version de PyTorch :", torch.__version__)
   print("CUDA disponible ?  :", torch.cuda.is_available())

- Si l'import fonctionne sans erreur, PyTorch est install√© correctement.
- Si `torch.cuda.is_available()` renvoie `False`, cela signifie que votre machine n‚Äôa pas de GPU compatible CUDA ou qu'elle n'a pas acc√®s au .

#####################################
A FAIRE : fin de la phrase + partie nvidia-sim
#####################################


üìñ 4. Installer Jupyter (optionnel mais recommand√©)
----------------------

Pour coder les TPs vous pouvez utiliser VSCode ou des notebook Jupyter. Pour installer Jupyter, vous devrez d'abord vous assurer que l'environnement virtuel est activ√©, puis ex√©cuter la commande suivante :

.. code-block:: bash

   pip install notebook


#####################################
A FAIRE : ILLUSTRER AVEC DES FIGURES + de la doc
#####################################