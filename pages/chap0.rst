
.. slide::

Chapitre 0 - Installation des paquets et bibliothques n√©cessaires pour le cours
================

üéØ Objectifs du Chapitre
----------------------


.. important::

   √Ä la fin de ce chapitre, vous saurez : 
   
   - Cr√©er un environnement virtuel Python.
   - Installer PyTorch et les biblioth√®ques associ√©es.
   - V√©rifier l'installation de PyTorch.
   - Installer Jupyter Notebook (optionnel mais recommand√©).   

.. slide::

üìñ 1. Cr√©er un environnement virtuel
----------------------
Pour installer proprement PyTorch et les biblioth√®ques n√©cessaires, nous allons d‚Äôabord cr√©er un environnement virtuel. 


1.1. Qu'est-ce qu'un environnement virtuel ?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Un environnement virtuel (ou Virtual Environment en anglais) est un dossier isol√© dans lequel on peut installer des biblioth√®ques Python sans interf√©rer avec le reste du syst√®me.

En pratique, cela permet :

- d‚Äôavoir une version pr√©cise des biblioth√®ques pour un projet donn√©,
- d‚Äô√©viter les conflits entre diff√©rentes versions de packages,
- de tester des versions sp√©cifiques de biblioth√®ques sans risque,
- de partager facilement le projet avec d'autres personnes,
- de garantir que le code fonctionne de la m√™me mani√®re sur diff√©rentes machines,
- de ne pas polluer l‚Äôinstallation Python globale de votre ordinateur.

C‚Äôest une pratique essentielle pour tous les projets en Machine Learning.

.. slide::

1.2. Tester si ``venv`` est disponible
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Le module ``venv``, inclus normalement avec Python 3, permet de cr√©er un environnement virtuel. Avant de l‚Äôutiliser, vous pouvez v√©rifier s‚Äôil est install√© en tapant la commande suivante dans votre terminal : 

.. code-block:: bash

   python3 -m venv --help

- Si l‚Äôaide s‚Äôaffiche, le module est disponible.
- Sinon, vous verrez une erreur indiquant que ``venv`` est introuvable. Dans ce cas, installez-le avec :

.. code-block:: bash

   sudo apt install python3-venv

.. slide::

1.3. Cr√©er l‚Äôenvironnement
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Pour cr√©er un environnement virtuel, vous pouvez utiliser la commande suivante dans votre terminal :

.. code-block:: bash

   python -m venv nom_de_l_environnement --system-site-packages
o√π ``nom_de_l_environnement`` est le nom que vous souhaitez donner √† votre environnement virtuel et ``--system-site-packages`` permet d'acc√©der aux paquets install√©s sur votre syst√®me global (utile pour r√©utiliser des biblioth√®ques d√©j√† install√©es comme ``numpy`` ou ``matplotlib``).

Placez-vous dans le dossier de travail de votre projet (par exemple ``cours_dl/``), puis cr√©ez un environnement virtuel avec :

.. code-block:: bash

   python3 -m venv nom_de_l_environnement

Cela cr√©e un sous-dossier nomm√© ``nom_de_l_environnement`` contenant une version isol√©e de Python. Par exemple, si vous nommez votre environnement ``env_dl``, vous aurez un dossier ``env_dl`` dans votre r√©pertoire de travail.

.. slide::

1.4. Activer l‚Äôenvironnement virtuel
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Vous devez ensuite activer l‚Äôenvironnement pour l‚Äôutiliser en tapant dans votre terminal :

.. code-block:: bash
    
    source nom_de_l_environnement/bin/activate 

Vous saurez que l'environnement est activ√© lorsque le nom de l'environnement appara√Ætra entre parenth√®ses au d√©but de votre invite de commande dans le terminal.

.. slide::

1.5. D√©sactiver l‚Äôenvironnement virtuel
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Pour d√©sactiver l'environnement virtuel, vous pouvez utiliser la commande :

.. code-block:: bash

   deactivate


.. slide::

üìñ 2. Installation de PyTorch
----------------------
Une fois l‚Äôenvironnement virtuel activ√©, vous pouvez installer PyTorch et les biblioth√®ques associ√©es.  Mais avant d‚Äôinstaller PyTorch, faisons un petit point sur ce que la biblioth√®que apporte. PyTorch est une biblioth√®que Python tr√®s utilis√©e en **deep learning**.  Elle permet de :  

- cr√©er et entra√Æner facilement des r√©seaux de neurones,  
- utiliser le GPU (quand il est disponible) pour acc√©l√©rer les calculs.  

üëâ Dans ce cours, PyTorch sera notre outil principal pour manipuler des donn√©es et entra√Æner des mod√®les.

.. note::

   üí° **CPU, GPU et CUDA en deux mots**

   - Un **CPU** (processeur classique) ex√©cute bien des calculs g√©n√©raux, mais il est limit√© pour des calculs massifs.  
   - Un **GPU** (Graphics Processing Unit), initialement con√ßu pour l‚Äôaffichage graphique, est capable de r√©aliser **des milliers de calculs en parall√®le** ‚Üí id√©al pour l‚Äôentra√Ænement des r√©seaux de neurones.  
   - **CUDA** est une biblioth√®que d√©velopp√©e par NVIDIA qui permet √† PyTorch de communiquer avec le GPU pour acc√©l√©rer les calculs.  

   üëâ Pas d‚Äôinqui√©tude si vous n‚Äôavez pas de GPU : PyTorch fonctionne aussi tr√®s bien sur CPU, simplement plus lentement.


.. slide::

2.1. Choisir la version de PyTorch
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

PyTorch propose diff√©rentes versions adapt√©es √† divers syst√®mes d'exploitation et configurations mat√©rielles (CPU, GPU). Dans ce cours, nous utiliserons la version de PyTorch compatible par d√©faut avec GPU. Cependant, cette version fonctionnera sur toutes les machines (avec ou sans GPU).

Dans le terminal (dans lequel l'environnement virtuel est activ√©), tapez :

.. code-block:: bash

   pip install torch torchvision torchaudio

Cela installera :

- **torch** : la biblioth√®que principale de PyTorch,
- **torchvision** : des outils pour manipuler des images, mod√®les pr√©-entra√Æn√©s, etc.,
- **torchaudio** : pour les donn√©es audios (utile pour d'autres projets).

.. slide::
2.2. Lister les paquets install√©s
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Vous pouvez afficher la liste des biblioth√®ques install√©es dans l‚Äôenvironnement virtuel avec :

.. code-block:: bash

   pip freeze

Cela vous permettra de voir les versions exactes de ``torch``, ``torchvision``, etc.

.. slide::
2.3. V√©rifier l‚Äôinstallation de PyTorch
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Vous pouvez maintenant tester l‚Äôinstallation de PyTorch avec ce petit script Python :

.. code-block:: python

   import torch

   print("Version de PyTorch :", torch.__version__)
   print("CUDA disponible ?  :", torch.cuda.is_available())

- Si l'import fonctionne sans erreur, PyTorch est install√© correctement.
- Si ``torch.cuda.is_available()`` renvoie ``False``, cela signifie que votre machine n‚Äôa pas de GPU compatible CUDA ou qu'elle n'a probablement pas acc√®s au GPU car les pilotes CUDA/cuDNN ne sont pas correctement install√©s.

Vous pouvez toujours utiliser PyTorch sur CPU, mais le temps d'entra√Ænement sera plus long notamment pour les mod√®les complexes.

.. slide::
2.4. Installer les pilotes NVIDIA et CUDA
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Pour utiliser PyTorch avec un GPU, il ne suffit pas d‚Äôinstaller la biblioth√®que ``torch``. Votre syst√®me doit aussi disposer des pilotes NVIDIA et de CUDA/cuDNN qui permettent √† PyTorch de dialoguer avec la carte graphique.

.. note::

   ‚ö†Ô∏è **Remarque importante pour les PC de l‚ÄôIUT**  

   - Sur les ordinateurs de l‚ÄôIUT, **cette √©tape n‚Äôest pas √† faire** : les pilotes NVIDIA et CUDA sont d√©j√† install√©s.  
   - Cette partie est uniquement utile si vous voulez installer PyTorch avec GPU **sur votre propre ordinateur personnel** √©quip√© d‚Äôune carte graphique NVIDIA compatible.  

.. slide::
2.4.1. V√©rifier si les pilotes sont install√©s
~~~~~~~~~~~~~~~~~~~~~~~
Avant d'installer quoi que ce soit, v√©rifiez si les pilotes NVIDIA sont d√©j√† install√©s sur votre syst√®me. Vous pouvez utiliser la commande suivante dans un terminal :

.. code-block:: bash

   nvidia-smi

- Si vous voyez un tableau avec des informations sur votre GPU (nom, m√©moire, utilisation, version du pilote, version CUDA), cela signifie que les pilotes sont install√©s et fonctionnent.
- Si la commande est inconnue ou √©choue, vous devez installer les pilotes.

.. slide::
2.4.2. Installer les pilotes NVIDIA 
~~~~~~~~~~~~~~~~~~~~~~~

Mettez d‚Äôabord √† jour la liste des paquets, puis installez les pilotes recommand√©s :

.. code-block:: bash

   sudo apt update
   sudo apt install nvidia-driver-Numero_de_version
   sudo apt install nvidia-cuda-toolkit

(Le num√©ro de version peut varier selon votre GPU. Vous pouvez v√©rifier la version conseill√©e en tapant ``ubuntu-drivers devices`` dans un terminal. Il sera marqu√© "recommended" devant le pilote recommand√©.)

**Red√©marrez votre ordinateur apr√®s l‚Äôinstallation des pilotes.**

.. slide::
2.4.3. Installer CUDA et cuDNN
~~~~~~~~~~~~~~~~~~~~~~~

Dans la plupart des cas, PyTorch t√©l√©charge automatiquement les bons binaires CUDA/cuDNN avec la commande  ``pip install torch ...``.  
Il n‚Äôest donc **pas obligatoire** d‚Äôinstaller CUDA s√©par√©ment.

Cependant, si vous souhaitez installer CUDA manuellement (option avanc√©e qu'il vaut mieux √©viter), vous pouvez t√©l√©charger l‚Äôinstallateur depuis : `https://developer.nvidia.com/cuda-downloads <https://developer.nvidia.com/cuda-downloads>`_

.. slide::
2.4.4. V√©rifier l‚Äôinstallation apr√®s red√©marrage
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Relancez la commande :

.. code-block:: bash

   nvidia-smi

Vous devez voir appara√Ætre les informations sur votre GPU et la version du pilote install√©e.  
√Ä ce stade, PyTorch pourra utiliser le GPU si install√© avec la bonne version CUDA. Pour vous en assurer, vous pouvez relancer le script Python de v√©rification :

.. code-block:: python

   import torch

   print("Version de PyTorch :", torch.__version__)
   print("CUDA disponible ?  :", torch.cuda.is_available())
Si ``torch.cuda.is_available()`` renvoie ``True``, PyTorch est pr√™t √† utiliser le GPU.

Sinon, supprimez PyTorch et r√©installez-le en vous assurant de choisir la bonne version CUDA. 


.. slide::
2.4.5. Supprimer et r√©installer PyTorch avec la bonne version CUDA
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Pour cela, vous pouvez taper dans un terminal :
.. code-block:: bash

   pip uninstall torch torchvision torchaudio

Avant de le r√©installer, il est important de v√©rifier la version de CUDA support√©e par votre GPU.  
Pour cela, utilisez la commande suivante :

.. code-block:: bash

   nvidia-smi

- Dans le tableau affich√©, rep√©rez la colonne **CUDA Version**.  
- Par exemple, si elle indique par exemple ``11.8``, vous devrez installer PyTorch avec ``cu118`` :

.. code-block:: bash

   pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118

Une fois l‚Äôinstallation termin√©e, relancez Python et v√©rifiez :

.. code-block:: python

   import torch

   print("Version de PyTorch :", torch.__version__)
   print("CUDA disponible ?  :", torch.cuda.is_available())
Si ``torch.cuda.is_available()`` renvoie ``True``, PyTorch est pr√™t √† utiliser le GPU.

.. slide::
2.4.6. Erreur ``CUDA_VISIBLE_DEVICES``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Si vous obtenez l'erreur suivante ``"CUDA initialization: CUDA unknown error - this may be due to an incorrectly set up environment, e.g. changing env variable CUDA_VISIBLE_DEVICES after program start. Setting the available devices to be zero., etc."`` apr√®s une mise en veille, il faut taper dans un terminal les commandes suivantes pour r√©soudre le probl√®me : 

.. code-block:: bash
   sudo rmmod nvidia_uvm
   sudo modprobe nvidia_uvm

.. slide::
2.5. Surveiller l‚Äôutilisation du GPU avec ``nvtop``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Lorsque l‚Äôon entra√Æne un mod√®le de deep learning sur GPU, il est souvent utile de **visualiser en temps r√©el** l‚Äôutilisation de la carte graphique (m√©moire, charge de calcul, processus en cours).

Pour cela, vous pouvez installer l‚Äôoutil ``nvtop`` :

.. code-block:: bash

   sudo apt install nvtop

Ensuite, lancez la commande :

.. code-block:: bash

   nvtop

Vous verrez une interface en temps r√©el indiquant :  

- l‚Äôoccupation de la m√©moire GPU,  
- l‚Äôutilisation du GPU par processus,  
- la charge globale.  

üëâ C‚Äôest l‚Äô√©quivalent de la commande ``top`` mais pour le GPU. Cette commande est tr√®s utile pour v√©rifier que **PyTorch utilise bien votre carte graphique** lors des entra√Ænements.


.. slide::
üìñ 3. Installer Jupyter Notebook (optionnel mais recommand√©)
----------------------

Pour coder les TPs, vous pouvez utiliser VSCode ou Jupyter Notebook.  Jupyter Notebook est un environnement interactif tr√®s utilis√© en Python, id√©al pour le deep learning. Il permet d‚Äôex√©cuter du code par blocs, de visualiser les r√©sultats imm√©diatement et de documenter le travail dans le m√™me fichier.

Pour installer Jupyter, vous devrez d'abord vous assurer que l'environnement virtuel est activ√©, puis ex√©cuter la commande suivante :

.. code-block:: bash

   pip install notebook

L‚Äôinstallation inclut ``notebook`` ainsi que tous les outils n√©cessaires pour ex√©cuter des blocs Python.

.. slide::
3.1. Lancer Jupyter
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Cr√©er un dossier pour les notebooks, par exemple ``cours_dl/notebooks/``.
Ensuite, placez-vous dans ce dossier avec la commande ``cd`` :
.. code-block:: bash

   cd cours_dl/notebooks/  

Pour d√©marrer Jupyter Notebook dans le dossier courant, assurez-vous d'avoir activ√© l'environnement virtuel, puis tapez :

.. code-block:: bash

   jupyter notebook

- Un navigateur web s‚Äôouvrira automatiquement avec l‚Äôinterface de Jupyter illustr√©e par la figure ci-dessous.  
- Si le navigateur ne s‚Äôouvre pas, copiez-collez l‚ÄôURL affich√©e dans le terminal dans votre navigateur pr√©f√©r√©.


.. center::
    .. image:: images/jupyter_workspace.png
        :alt: Espace de travail Jupyter

.. slide::
3.2 Cr√©er un notebook
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- Cliquez sur **New ‚Üí Python 3** pour cr√©er un nouveau notebook comme illustr√© par la figure ci-dessous.  

.. center::
    .. image:: images/jupyter_new_file.png
        :alt: Cr√©er un nouveau notebook Jupyter

- Chaque cellule de la figure ci-dessous peut contenir du code Python que vous pouvez ex√©cuter avec ``Shift + Enter``.  

.. center::
    .. image:: images/jupyter_home_page.png
        :alt: Un Jupyter Notebook vide

- Vous pouvez aussi ajouter des cellules Markdown pour documenter vos explications.

.. slide::
3.3 V√©rification
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Pour v√©rifier que Jupyter utilise bien votre virtualenv avec PyTorch install√©, cr√©ez une cellule et tapez :

.. code-block:: python

   import torch
   print("Version de PyTorch :", torch.__version__)
   print("CUDA disponible ? :", torch.cuda.is_available())

Si tout est correct, vous devriez voir la version de PyTorch et l'√©tat de CUDA s'afficher sans erreur.

.. center::
    .. image:: images/jupyter_test_ve.png
        :alt: V√©rification de l'installation de PyTorch dans Jupyter 


.. slide::
3.4 Renommer le notebook
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Pour renommer le notebook, cliquez sur le nom par d√©faut (g√©n√©ralement ``Untitled``) en haut √† gauche, puis entrez un nouveau nom, par exemple ``test_installation.ipynb``.
Cela vous permettra de garder une trace de vos notebooks et de les organiser facilement.
.. center::
    .. image:: images/jupyter_rename.png
        :alt: Renommer le notebook Jupyter

.. center::
    .. image:: images/jupyter_after_rename.png
        :alt: Apr√®s renommage du notebook Jupyter

.. slide::
üìñ 4. Documentation utile
----------------------

Pour approfondir vos connaissances et trouver des r√©ponses rapides, voici quelques ressources fiables et pertinentes pour ce cours :

4.1 PyTorch
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- Documentation officielle : `https://pytorch.org/docs/stable/index.html <https://pytorch.org/docs/stable/index.html>`_
- Tutoriels PyTorch : `https://pytorch.org/tutorials/ <https://pytorch.org/tutorials/>`_
- Guide ‚ÄúGet Started‚Äù avec CUDA : `https://pytorch.org/get-started/locally/ <https://pytorch.org/get-started/locally/>`_ 

4.2 Python
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- AOP Python : `https://cgaspard3333.github.io/intro-python/ <https://cgaspard3333.github.io/intro-python/>`_
- Documentation Python : `https://docs.python.org/3/ <https://docs.python.org/3/>`_


4.3 Jupyter Notebook
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- Documentation Jupyter : `https://jupyter.org/documentation <https://jupyter.org/documentation>`_
- Tutoriel Jupyter Notebook : 

`https://jupyter-notebook.readthedocs.io/en/stable/examples/Notebook/Notebook%20Basics.html <https://jupyter-notebook.readthedocs.io/en/stable/examples/Notebook/Notebook%20Basics.html>`_

- Commandes utiles et raccourcis : 

`https://jupyter-notebook.readthedocs.io/en/stable/examples/Notebook/Notebook%20Basics.html#keyboard-shortcuts <https://jupyter-notebook.readthedocs.io/en/stable/examples/Notebook/Notebook%20Basics.html#keyboard-shortcuts>`_

4.4 CUDA / NVIDIA
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- V√©rification des pilotes et CUDA : `https://developer.nvidia.com/cuda-toolkit <https://developer.nvidia.com/cuda-toolkit>`_
- Informations sur les GPU NVIDIA : `https://developer.nvidia.com/cuda-gpus <https://developer.nvidia.com/cuda-gpus>`_
- Guide d'installation de CUDA : `https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html <https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html>`_

4.5 Communaut√© et forums
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- Stack Overflow (tag ``python``) : `https://stackoverflow.com/questions/tagged/python <https://stackoverflow.com/questions/tagged/python>`_
- PyTorch Forums : `https://discuss.pytorch.org/ <https://discuss.pytorch.org/>`_

Ces liens vous permettront de consulter des exemples, de comprendre les erreurs et de rester √† jour sur les derni√®res fonctionnalit√©s.
